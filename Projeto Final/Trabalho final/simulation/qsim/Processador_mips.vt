// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/07/2018 22:23:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processador_mips_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_mips_final_vlg_sample_tst(
	CLK,
	CLKM,
	SEL,
	sampler_tx
);
input  CLK;
input  CLKM;
input [1:0] SEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLKM or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processador_mips_final_vlg_check_tst (
	breg_r1_dado,
	breg_r2_dado,
	ctr_branch,
	ctr_branchn,
	ctr_escreve_mem,
	ctr_escreve_reg,
	ctr_jal,
	ctr_jerro,
	ctr_jump,
	ctr_le_mem,
	ctr_lui,
	ctr_mem_para_reg,
	ctr_orig_alu,
	ctr_reg_ds,
	ctrl_op_ula,
	din_breg,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	OUTPUT,
	saida_epc,
	sinal_overflow,
	sampler_rx
);
input [31:0] breg_r1_dado;
input [31:0] breg_r2_dado;
input  ctr_branch;
input  ctr_branchn;
input  ctr_escreve_mem;
input  ctr_escreve_reg;
input  ctr_jal;
input  ctr_jerro;
input  ctr_jump;
input  ctr_le_mem;
input  ctr_lui;
input  ctr_mem_para_reg;
input  ctr_orig_alu;
input  ctr_reg_ds;
input [3:0] ctrl_op_ula;
input [31:0] din_breg;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [31:0] OUTPUT;
input [31:0] saida_epc;
input  sinal_overflow;
input sampler_rx;

reg [31:0] breg_r1_dado_expected;
reg [31:0] breg_r2_dado_expected;
reg  ctr_branch_expected;
reg  ctr_branchn_expected;
reg  ctr_escreve_mem_expected;
reg  ctr_escreve_reg_expected;
reg  ctr_jal_expected;
reg  ctr_jerro_expected;
reg  ctr_jump_expected;
reg  ctr_le_mem_expected;
reg  ctr_lui_expected;
reg  ctr_mem_para_reg_expected;
reg  ctr_orig_alu_expected;
reg  ctr_reg_ds_expected;
reg [3:0] ctrl_op_ula_expected;
reg [31:0] din_breg_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [31:0] OUTPUT_expected;
reg [31:0] saida_epc_expected;
reg  sinal_overflow_expected;

reg [31:0] breg_r1_dado_prev;
reg [31:0] breg_r2_dado_prev;
reg  ctr_branch_prev;
reg  ctr_branchn_prev;
reg  ctr_escreve_mem_prev;
reg  ctr_escreve_reg_prev;
reg  ctr_jal_prev;
reg  ctr_jerro_prev;
reg  ctr_jump_prev;
reg  ctr_le_mem_prev;
reg  ctr_lui_prev;
reg  ctr_mem_para_reg_prev;
reg  ctr_orig_alu_prev;
reg  ctr_reg_ds_prev;
reg [3:0] ctrl_op_ula_prev;
reg [31:0] din_breg_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [31:0] OUTPUT_prev;
reg [31:0] saida_epc_prev;
reg  sinal_overflow_prev;

reg [31:0] breg_r1_dado_expected_prev;
reg [31:0] breg_r2_dado_expected_prev;
reg  ctr_branch_expected_prev;
reg  ctr_branchn_expected_prev;
reg  ctr_escreve_mem_expected_prev;
reg  ctr_escreve_reg_expected_prev;
reg  ctr_jal_expected_prev;
reg  ctr_jerro_expected_prev;
reg  ctr_jump_expected_prev;
reg  ctr_le_mem_expected_prev;
reg  ctr_lui_expected_prev;
reg  ctr_mem_para_reg_expected_prev;
reg  ctr_reg_ds_expected_prev;
reg [3:0] ctrl_op_ula_expected_prev;
reg [31:0] din_breg_expected_prev;
reg [31:0] OUTPUT_expected_prev;
reg [31:0] saida_epc_expected_prev;
reg  sinal_overflow_expected_prev;

reg [31:0] last_breg_r1_dado_exp;
reg [31:0] last_breg_r2_dado_exp;
reg  last_ctr_branch_exp;
reg  last_ctr_branchn_exp;
reg  last_ctr_escreve_mem_exp;
reg  last_ctr_escreve_reg_exp;
reg  last_ctr_jal_exp;
reg  last_ctr_jerro_exp;
reg  last_ctr_jump_exp;
reg  last_ctr_le_mem_exp;
reg  last_ctr_lui_exp;
reg  last_ctr_mem_para_reg_exp;
reg  last_ctr_reg_ds_exp;
reg [3:0] last_ctrl_op_ula_exp;
reg [31:0] last_din_breg_exp;
reg [31:0] last_OUTPUT_exp;
reg [31:0] last_saida_epc_exp;
reg  last_sinal_overflow_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:27] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 27'b1;
end

// update real /o prevs

always @(trigger)
begin
	breg_r1_dado_prev = breg_r1_dado;
	breg_r2_dado_prev = breg_r2_dado;
	ctr_branch_prev = ctr_branch;
	ctr_branchn_prev = ctr_branchn;
	ctr_escreve_mem_prev = ctr_escreve_mem;
	ctr_escreve_reg_prev = ctr_escreve_reg;
	ctr_jal_prev = ctr_jal;
	ctr_jerro_prev = ctr_jerro;
	ctr_jump_prev = ctr_jump;
	ctr_le_mem_prev = ctr_le_mem;
	ctr_lui_prev = ctr_lui;
	ctr_mem_para_reg_prev = ctr_mem_para_reg;
	ctr_orig_alu_prev = ctr_orig_alu;
	ctr_reg_ds_prev = ctr_reg_ds;
	ctrl_op_ula_prev = ctrl_op_ula;
	din_breg_prev = din_breg;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	OUTPUT_prev = OUTPUT;
	saida_epc_prev = saida_epc;
	sinal_overflow_prev = sinal_overflow;
end

// update expected /o prevs

always @(trigger)
begin
	breg_r1_dado_expected_prev = breg_r1_dado_expected;
	breg_r2_dado_expected_prev = breg_r2_dado_expected;
	ctr_branch_expected_prev = ctr_branch_expected;
	ctr_branchn_expected_prev = ctr_branchn_expected;
	ctr_escreve_mem_expected_prev = ctr_escreve_mem_expected;
	ctr_escreve_reg_expected_prev = ctr_escreve_reg_expected;
	ctr_jal_expected_prev = ctr_jal_expected;
	ctr_jerro_expected_prev = ctr_jerro_expected;
	ctr_jump_expected_prev = ctr_jump_expected;
	ctr_le_mem_expected_prev = ctr_le_mem_expected;
	ctr_lui_expected_prev = ctr_lui_expected;
	ctr_mem_para_reg_expected_prev = ctr_mem_para_reg_expected;
	ctr_reg_ds_expected_prev = ctr_reg_ds_expected;
	ctrl_op_ula_expected_prev = ctrl_op_ula_expected;
	din_breg_expected_prev = din_breg_expected;
	OUTPUT_expected_prev = OUTPUT_expected;
	saida_epc_expected_prev = saida_epc_expected;
	sinal_overflow_expected_prev = sinal_overflow_expected;
end


// expected \OUTPUT [ 31 ]
initial
begin
	OUTPUT_expected[31] = 1'bX;
end 
// expected \OUTPUT [ 30 ]
initial
begin
	OUTPUT_expected[30] = 1'bX;
end 
// expected \OUTPUT [ 29 ]
initial
begin
	OUTPUT_expected[29] = 1'bX;
end 
// expected \OUTPUT [ 28 ]
initial
begin
	OUTPUT_expected[28] = 1'bX;
end 
// expected \OUTPUT [ 27 ]
initial
begin
	OUTPUT_expected[27] = 1'bX;
end 
// expected \OUTPUT [ 26 ]
initial
begin
	OUTPUT_expected[26] = 1'bX;
end 
// expected \OUTPUT [ 25 ]
initial
begin
	OUTPUT_expected[25] = 1'bX;
end 
// expected \OUTPUT [ 24 ]
initial
begin
	OUTPUT_expected[24] = 1'bX;
end 
// expected \OUTPUT [ 23 ]
initial
begin
	OUTPUT_expected[23] = 1'bX;
end 
// expected \OUTPUT [ 22 ]
initial
begin
	OUTPUT_expected[22] = 1'bX;
end 
// expected \OUTPUT [ 21 ]
initial
begin
	OUTPUT_expected[21] = 1'bX;
end 
// expected \OUTPUT [ 20 ]
initial
begin
	OUTPUT_expected[20] = 1'bX;
end 
// expected \OUTPUT [ 19 ]
initial
begin
	OUTPUT_expected[19] = 1'bX;
end 
// expected \OUTPUT [ 18 ]
initial
begin
	OUTPUT_expected[18] = 1'bX;
end 
// expected \OUTPUT [ 17 ]
initial
begin
	OUTPUT_expected[17] = 1'bX;
end 
// expected \OUTPUT [ 16 ]
initial
begin
	OUTPUT_expected[16] = 1'bX;
end 
// expected \OUTPUT [ 15 ]
initial
begin
	OUTPUT_expected[15] = 1'bX;
end 
// expected \OUTPUT [ 14 ]
initial
begin
	OUTPUT_expected[14] = 1'bX;
end 
// expected \OUTPUT [ 13 ]
initial
begin
	OUTPUT_expected[13] = 1'bX;
end 
// expected \OUTPUT [ 12 ]
initial
begin
	OUTPUT_expected[12] = 1'bX;
end 
// expected \OUTPUT [ 11 ]
initial
begin
	OUTPUT_expected[11] = 1'bX;
end 
// expected \OUTPUT [ 10 ]
initial
begin
	OUTPUT_expected[10] = 1'bX;
end 
// expected \OUTPUT [ 9 ]
initial
begin
	OUTPUT_expected[9] = 1'bX;
end 
// expected \OUTPUT [ 8 ]
initial
begin
	OUTPUT_expected[8] = 1'bX;
end 
// expected \OUTPUT [ 7 ]
initial
begin
	OUTPUT_expected[7] = 1'bX;
end 
// expected \OUTPUT [ 6 ]
initial
begin
	OUTPUT_expected[6] = 1'bX;
end 
// expected \OUTPUT [ 5 ]
initial
begin
	OUTPUT_expected[5] = 1'bX;
end 
// expected \OUTPUT [ 4 ]
initial
begin
	OUTPUT_expected[4] = 1'bX;
end 
// expected \OUTPUT [ 3 ]
initial
begin
	OUTPUT_expected[3] = 1'bX;
end 
// expected \OUTPUT [ 2 ]
initial
begin
	OUTPUT_expected[2] = 1'bX;
end 
// expected \OUTPUT [ 1 ]
initial
begin
	OUTPUT_expected[1] = 1'bX;
end 
// expected \OUTPUT [ 0 ]
initial
begin
	OUTPUT_expected[0] = 1'bX;
end 
// expected ctrl_op_ula[ 3 ]
initial
begin
	ctrl_op_ula_expected[3] = 1'bX;
end 
// expected ctrl_op_ula[ 2 ]
initial
begin
	ctrl_op_ula_expected[2] = 1'bX;
end 
// expected ctrl_op_ula[ 1 ]
initial
begin
	ctrl_op_ula_expected[1] = 1'bX;
end 
// expected ctrl_op_ula[ 0 ]
initial
begin
	ctrl_op_ula_expected[0] = 1'bX;
end 
// expected din_breg[ 31 ]
initial
begin
	din_breg_expected[31] = 1'bX;
end 
// expected din_breg[ 30 ]
initial
begin
	din_breg_expected[30] = 1'bX;
end 
// expected din_breg[ 29 ]
initial
begin
	din_breg_expected[29] = 1'bX;
end 
// expected din_breg[ 28 ]
initial
begin
	din_breg_expected[28] = 1'bX;
end 
// expected din_breg[ 27 ]
initial
begin
	din_breg_expected[27] = 1'bX;
end 
// expected din_breg[ 26 ]
initial
begin
	din_breg_expected[26] = 1'bX;
end 
// expected din_breg[ 25 ]
initial
begin
	din_breg_expected[25] = 1'bX;
end 
// expected din_breg[ 24 ]
initial
begin
	din_breg_expected[24] = 1'bX;
end 
// expected din_breg[ 23 ]
initial
begin
	din_breg_expected[23] = 1'bX;
end 
// expected din_breg[ 22 ]
initial
begin
	din_breg_expected[22] = 1'bX;
end 
// expected din_breg[ 21 ]
initial
begin
	din_breg_expected[21] = 1'bX;
end 
// expected din_breg[ 20 ]
initial
begin
	din_breg_expected[20] = 1'bX;
end 
// expected din_breg[ 19 ]
initial
begin
	din_breg_expected[19] = 1'bX;
end 
// expected din_breg[ 18 ]
initial
begin
	din_breg_expected[18] = 1'bX;
end 
// expected din_breg[ 17 ]
initial
begin
	din_breg_expected[17] = 1'bX;
end 
// expected din_breg[ 16 ]
initial
begin
	din_breg_expected[16] = 1'bX;
end 
// expected din_breg[ 15 ]
initial
begin
	din_breg_expected[15] = 1'bX;
end 
// expected din_breg[ 14 ]
initial
begin
	din_breg_expected[14] = 1'bX;
end 
// expected din_breg[ 13 ]
initial
begin
	din_breg_expected[13] = 1'bX;
end 
// expected din_breg[ 12 ]
initial
begin
	din_breg_expected[12] = 1'bX;
end 
// expected din_breg[ 11 ]
initial
begin
	din_breg_expected[11] = 1'bX;
end 
// expected din_breg[ 10 ]
initial
begin
	din_breg_expected[10] = 1'bX;
end 
// expected din_breg[ 9 ]
initial
begin
	din_breg_expected[9] = 1'bX;
end 
// expected din_breg[ 8 ]
initial
begin
	din_breg_expected[8] = 1'bX;
end 
// expected din_breg[ 7 ]
initial
begin
	din_breg_expected[7] = 1'bX;
end 
// expected din_breg[ 6 ]
initial
begin
	din_breg_expected[6] = 1'bX;
end 
// expected din_breg[ 5 ]
initial
begin
	din_breg_expected[5] = 1'bX;
end 
// expected din_breg[ 4 ]
initial
begin
	din_breg_expected[4] = 1'bX;
end 
// expected din_breg[ 3 ]
initial
begin
	din_breg_expected[3] = 1'bX;
end 
// expected din_breg[ 2 ]
initial
begin
	din_breg_expected[2] = 1'bX;
end 
// expected din_breg[ 1 ]
initial
begin
	din_breg_expected[1] = 1'bX;
end 
// expected din_breg[ 0 ]
initial
begin
	din_breg_expected[0] = 1'bX;
end 
// expected breg_r1_dado[ 31 ]
initial
begin
	breg_r1_dado_expected[31] = 1'bX;
end 
// expected breg_r1_dado[ 30 ]
initial
begin
	breg_r1_dado_expected[30] = 1'bX;
end 
// expected breg_r1_dado[ 29 ]
initial
begin
	breg_r1_dado_expected[29] = 1'bX;
end 
// expected breg_r1_dado[ 28 ]
initial
begin
	breg_r1_dado_expected[28] = 1'bX;
end 
// expected breg_r1_dado[ 27 ]
initial
begin
	breg_r1_dado_expected[27] = 1'bX;
end 
// expected breg_r1_dado[ 26 ]
initial
begin
	breg_r1_dado_expected[26] = 1'bX;
end 
// expected breg_r1_dado[ 25 ]
initial
begin
	breg_r1_dado_expected[25] = 1'bX;
end 
// expected breg_r1_dado[ 24 ]
initial
begin
	breg_r1_dado_expected[24] = 1'bX;
end 
// expected breg_r1_dado[ 23 ]
initial
begin
	breg_r1_dado_expected[23] = 1'bX;
end 
// expected breg_r1_dado[ 22 ]
initial
begin
	breg_r1_dado_expected[22] = 1'bX;
end 
// expected breg_r1_dado[ 21 ]
initial
begin
	breg_r1_dado_expected[21] = 1'bX;
end 
// expected breg_r1_dado[ 20 ]
initial
begin
	breg_r1_dado_expected[20] = 1'bX;
end 
// expected breg_r1_dado[ 19 ]
initial
begin
	breg_r1_dado_expected[19] = 1'bX;
end 
// expected breg_r1_dado[ 18 ]
initial
begin
	breg_r1_dado_expected[18] = 1'bX;
end 
// expected breg_r1_dado[ 17 ]
initial
begin
	breg_r1_dado_expected[17] = 1'bX;
end 
// expected breg_r1_dado[ 16 ]
initial
begin
	breg_r1_dado_expected[16] = 1'bX;
end 
// expected breg_r1_dado[ 15 ]
initial
begin
	breg_r1_dado_expected[15] = 1'bX;
end 
// expected breg_r1_dado[ 14 ]
initial
begin
	breg_r1_dado_expected[14] = 1'bX;
end 
// expected breg_r1_dado[ 13 ]
initial
begin
	breg_r1_dado_expected[13] = 1'bX;
end 
// expected breg_r1_dado[ 12 ]
initial
begin
	breg_r1_dado_expected[12] = 1'bX;
end 
// expected breg_r1_dado[ 11 ]
initial
begin
	breg_r1_dado_expected[11] = 1'bX;
end 
// expected breg_r1_dado[ 10 ]
initial
begin
	breg_r1_dado_expected[10] = 1'bX;
end 
// expected breg_r1_dado[ 9 ]
initial
begin
	breg_r1_dado_expected[9] = 1'bX;
end 
// expected breg_r1_dado[ 8 ]
initial
begin
	breg_r1_dado_expected[8] = 1'bX;
end 
// expected breg_r1_dado[ 7 ]
initial
begin
	breg_r1_dado_expected[7] = 1'bX;
end 
// expected breg_r1_dado[ 6 ]
initial
begin
	breg_r1_dado_expected[6] = 1'bX;
end 
// expected breg_r1_dado[ 5 ]
initial
begin
	breg_r1_dado_expected[5] = 1'bX;
end 
// expected breg_r1_dado[ 4 ]
initial
begin
	breg_r1_dado_expected[4] = 1'bX;
end 
// expected breg_r1_dado[ 3 ]
initial
begin
	breg_r1_dado_expected[3] = 1'bX;
end 
// expected breg_r1_dado[ 2 ]
initial
begin
	breg_r1_dado_expected[2] = 1'bX;
end 
// expected breg_r1_dado[ 1 ]
initial
begin
	breg_r1_dado_expected[1] = 1'bX;
end 
// expected breg_r1_dado[ 0 ]
initial
begin
	breg_r1_dado_expected[0] = 1'bX;
end 
// expected breg_r2_dado[ 31 ]
initial
begin
	breg_r2_dado_expected[31] = 1'bX;
end 
// expected breg_r2_dado[ 30 ]
initial
begin
	breg_r2_dado_expected[30] = 1'bX;
end 
// expected breg_r2_dado[ 29 ]
initial
begin
	breg_r2_dado_expected[29] = 1'bX;
end 
// expected breg_r2_dado[ 28 ]
initial
begin
	breg_r2_dado_expected[28] = 1'bX;
end 
// expected breg_r2_dado[ 27 ]
initial
begin
	breg_r2_dado_expected[27] = 1'bX;
end 
// expected breg_r2_dado[ 26 ]
initial
begin
	breg_r2_dado_expected[26] = 1'bX;
end 
// expected breg_r2_dado[ 25 ]
initial
begin
	breg_r2_dado_expected[25] = 1'bX;
end 
// expected breg_r2_dado[ 24 ]
initial
begin
	breg_r2_dado_expected[24] = 1'bX;
end 
// expected breg_r2_dado[ 23 ]
initial
begin
	breg_r2_dado_expected[23] = 1'bX;
end 
// expected breg_r2_dado[ 22 ]
initial
begin
	breg_r2_dado_expected[22] = 1'bX;
end 
// expected breg_r2_dado[ 21 ]
initial
begin
	breg_r2_dado_expected[21] = 1'bX;
end 
// expected breg_r2_dado[ 20 ]
initial
begin
	breg_r2_dado_expected[20] = 1'bX;
end 
// expected breg_r2_dado[ 19 ]
initial
begin
	breg_r2_dado_expected[19] = 1'bX;
end 
// expected breg_r2_dado[ 18 ]
initial
begin
	breg_r2_dado_expected[18] = 1'bX;
end 
// expected breg_r2_dado[ 17 ]
initial
begin
	breg_r2_dado_expected[17] = 1'bX;
end 
// expected breg_r2_dado[ 16 ]
initial
begin
	breg_r2_dado_expected[16] = 1'bX;
end 
// expected breg_r2_dado[ 15 ]
initial
begin
	breg_r2_dado_expected[15] = 1'bX;
end 
// expected breg_r2_dado[ 14 ]
initial
begin
	breg_r2_dado_expected[14] = 1'bX;
end 
// expected breg_r2_dado[ 13 ]
initial
begin
	breg_r2_dado_expected[13] = 1'bX;
end 
// expected breg_r2_dado[ 12 ]
initial
begin
	breg_r2_dado_expected[12] = 1'bX;
end 
// expected breg_r2_dado[ 11 ]
initial
begin
	breg_r2_dado_expected[11] = 1'bX;
end 
// expected breg_r2_dado[ 10 ]
initial
begin
	breg_r2_dado_expected[10] = 1'bX;
end 
// expected breg_r2_dado[ 9 ]
initial
begin
	breg_r2_dado_expected[9] = 1'bX;
end 
// expected breg_r2_dado[ 8 ]
initial
begin
	breg_r2_dado_expected[8] = 1'bX;
end 
// expected breg_r2_dado[ 7 ]
initial
begin
	breg_r2_dado_expected[7] = 1'bX;
end 
// expected breg_r2_dado[ 6 ]
initial
begin
	breg_r2_dado_expected[6] = 1'bX;
end 
// expected breg_r2_dado[ 5 ]
initial
begin
	breg_r2_dado_expected[5] = 1'bX;
end 
// expected breg_r2_dado[ 4 ]
initial
begin
	breg_r2_dado_expected[4] = 1'bX;
end 
// expected breg_r2_dado[ 3 ]
initial
begin
	breg_r2_dado_expected[3] = 1'bX;
end 
// expected breg_r2_dado[ 2 ]
initial
begin
	breg_r2_dado_expected[2] = 1'bX;
end 
// expected breg_r2_dado[ 1 ]
initial
begin
	breg_r2_dado_expected[1] = 1'bX;
end 
// expected breg_r2_dado[ 0 ]
initial
begin
	breg_r2_dado_expected[0] = 1'bX;
end 
// expected saida_epc[ 31 ]
initial
begin
	saida_epc_expected[31] = 1'bX;
end 
// expected saida_epc[ 30 ]
initial
begin
	saida_epc_expected[30] = 1'bX;
end 
// expected saida_epc[ 29 ]
initial
begin
	saida_epc_expected[29] = 1'bX;
end 
// expected saida_epc[ 28 ]
initial
begin
	saida_epc_expected[28] = 1'bX;
end 
// expected saida_epc[ 27 ]
initial
begin
	saida_epc_expected[27] = 1'bX;
end 
// expected saida_epc[ 26 ]
initial
begin
	saida_epc_expected[26] = 1'bX;
end 
// expected saida_epc[ 25 ]
initial
begin
	saida_epc_expected[25] = 1'bX;
end 
// expected saida_epc[ 24 ]
initial
begin
	saida_epc_expected[24] = 1'bX;
end 
// expected saida_epc[ 23 ]
initial
begin
	saida_epc_expected[23] = 1'bX;
end 
// expected saida_epc[ 22 ]
initial
begin
	saida_epc_expected[22] = 1'bX;
end 
// expected saida_epc[ 21 ]
initial
begin
	saida_epc_expected[21] = 1'bX;
end 
// expected saida_epc[ 20 ]
initial
begin
	saida_epc_expected[20] = 1'bX;
end 
// expected saida_epc[ 19 ]
initial
begin
	saida_epc_expected[19] = 1'bX;
end 
// expected saida_epc[ 18 ]
initial
begin
	saida_epc_expected[18] = 1'bX;
end 
// expected saida_epc[ 17 ]
initial
begin
	saida_epc_expected[17] = 1'bX;
end 
// expected saida_epc[ 16 ]
initial
begin
	saida_epc_expected[16] = 1'bX;
end 
// expected saida_epc[ 15 ]
initial
begin
	saida_epc_expected[15] = 1'bX;
end 
// expected saida_epc[ 14 ]
initial
begin
	saida_epc_expected[14] = 1'bX;
end 
// expected saida_epc[ 13 ]
initial
begin
	saida_epc_expected[13] = 1'bX;
end 
// expected saida_epc[ 12 ]
initial
begin
	saida_epc_expected[12] = 1'bX;
end 
// expected saida_epc[ 11 ]
initial
begin
	saida_epc_expected[11] = 1'bX;
end 
// expected saida_epc[ 10 ]
initial
begin
	saida_epc_expected[10] = 1'bX;
end 
// expected saida_epc[ 9 ]
initial
begin
	saida_epc_expected[9] = 1'bX;
end 
// expected saida_epc[ 8 ]
initial
begin
	saida_epc_expected[8] = 1'bX;
end 
// expected saida_epc[ 7 ]
initial
begin
	saida_epc_expected[7] = 1'bX;
end 
// expected saida_epc[ 6 ]
initial
begin
	saida_epc_expected[6] = 1'bX;
end 
// expected saida_epc[ 5 ]
initial
begin
	saida_epc_expected[5] = 1'bX;
end 
// expected saida_epc[ 4 ]
initial
begin
	saida_epc_expected[4] = 1'bX;
end 
// expected saida_epc[ 3 ]
initial
begin
	saida_epc_expected[3] = 1'bX;
end 
// expected saida_epc[ 2 ]
initial
begin
	saida_epc_expected[2] = 1'bX;
end 
// expected saida_epc[ 1 ]
initial
begin
	saida_epc_expected[1] = 1'bX;
end 
// expected saida_epc[ 0 ]
initial
begin
	saida_epc_expected[0] = 1'bX;
end 

// expected sinal_overflow
initial
begin
	sinal_overflow_expected = 1'bX;
end 

// expected ctr_branch
initial
begin
	ctr_branch_expected = 1'bX;
end 

// expected ctr_branchn
initial
begin
	ctr_branchn_expected = 1'bX;
end 

// expected ctr_escreve_mem
initial
begin
	ctr_escreve_mem_expected = 1'bX;
end 

// expected ctr_escreve_reg
initial
begin
	ctr_escreve_reg_expected = 1'bX;
end 

// expected ctr_jal
initial
begin
	ctr_jal_expected = 1'bX;
end 

// expected ctr_jerro
initial
begin
	ctr_jerro_expected = 1'bX;
end 

// expected ctr_jump
initial
begin
	ctr_jump_expected = 1'bX;
end 

// expected ctr_le_mem
initial
begin
	ctr_le_mem_expected = 1'bX;
end 

// expected ctr_lui
initial
begin
	ctr_lui_expected = 1'bX;
end 

// expected ctr_mem_para_reg
initial
begin
	ctr_mem_para_reg_expected = 1'bX;
end 

// expected ctr_reg_ds
initial
begin
	ctr_reg_ds_expected = 1'bX;
end 
// generate trigger
always @(breg_r1_dado_expected or breg_r1_dado or breg_r2_dado_expected or breg_r2_dado or ctr_branch_expected or ctr_branch or ctr_branchn_expected or ctr_branchn or ctr_escreve_mem_expected or ctr_escreve_mem or ctr_escreve_reg_expected or ctr_escreve_reg or ctr_jal_expected or ctr_jal or ctr_jerro_expected or ctr_jerro or ctr_jump_expected or ctr_jump or ctr_le_mem_expected or ctr_le_mem or ctr_lui_expected or ctr_lui or ctr_mem_para_reg_expected or ctr_mem_para_reg or ctr_orig_alu_expected or ctr_orig_alu or ctr_reg_ds_expected or ctr_reg_ds or ctrl_op_ula_expected or ctrl_op_ula or din_breg_expected or din_breg or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or OUTPUT_expected or OUTPUT or saida_epc_expected or saida_epc or sinal_overflow_expected or sinal_overflow)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected breg_r1_dado = %b | expected breg_r2_dado = %b | expected ctr_branch = %b | expected ctr_branchn = %b | expected ctr_escreve_mem = %b | expected ctr_escreve_reg = %b | expected ctr_jal = %b | expected ctr_jerro = %b | expected ctr_jump = %b | expected ctr_le_mem = %b | expected ctr_lui = %b | expected ctr_mem_para_reg = %b | expected ctr_orig_alu = %b | expected ctr_reg_ds = %b | expected ctrl_op_ula = %b | expected din_breg = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected OUTPUT = %b | expected saida_epc = %b | expected sinal_overflow = %b | ",breg_r1_dado_expected_prev,breg_r2_dado_expected_prev,ctr_branch_expected_prev,ctr_branchn_expected_prev,ctr_escreve_mem_expected_prev,ctr_escreve_reg_expected_prev,ctr_jal_expected_prev,ctr_jerro_expected_prev,ctr_jump_expected_prev,ctr_le_mem_expected_prev,ctr_lui_expected_prev,ctr_mem_para_reg_expected_prev,ctr_orig_alu_expected_prev,ctr_reg_ds_expected_prev,ctrl_op_ula_expected_prev,din_breg_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,OUTPUT_expected_prev,saida_epc_expected_prev,sinal_overflow_expected_prev);
	$display("| real breg_r1_dado = %b | real breg_r2_dado = %b | real ctr_branch = %b | real ctr_branchn = %b | real ctr_escreve_mem = %b | real ctr_escreve_reg = %b | real ctr_jal = %b | real ctr_jerro = %b | real ctr_jump = %b | real ctr_le_mem = %b | real ctr_lui = %b | real ctr_mem_para_reg = %b | real ctr_orig_alu = %b | real ctr_reg_ds = %b | real ctrl_op_ula = %b | real din_breg = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real OUTPUT = %b | real saida_epc = %b | real sinal_overflow = %b | ",breg_r1_dado_prev,breg_r2_dado_prev,ctr_branch_prev,ctr_branchn_prev,ctr_escreve_mem_prev,ctr_escreve_reg_prev,ctr_jal_prev,ctr_jerro_prev,ctr_jump_prev,ctr_le_mem_prev,ctr_lui_prev,ctr_mem_para_reg_prev,ctr_orig_alu_prev,ctr_reg_ds_prev,ctrl_op_ula_prev,din_breg_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,OUTPUT_prev,saida_epc_prev,sinal_overflow_prev);
`endif
	if (
		( breg_r1_dado_expected_prev[0] !== 1'bx ) && ( breg_r1_dado_prev[0] !== breg_r1_dado_expected_prev[0] )
		&& ((breg_r1_dado_expected_prev[0] !== last_breg_r1_dado_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[0] = breg_r1_dado_expected_prev[0];
	end
	if (
		( breg_r1_dado_expected_prev[1] !== 1'bx ) && ( breg_r1_dado_prev[1] !== breg_r1_dado_expected_prev[1] )
		&& ((breg_r1_dado_expected_prev[1] !== last_breg_r1_dado_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[1] = breg_r1_dado_expected_prev[1];
	end
	if (
		( breg_r1_dado_expected_prev[2] !== 1'bx ) && ( breg_r1_dado_prev[2] !== breg_r1_dado_expected_prev[2] )
		&& ((breg_r1_dado_expected_prev[2] !== last_breg_r1_dado_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[2] = breg_r1_dado_expected_prev[2];
	end
	if (
		( breg_r1_dado_expected_prev[3] !== 1'bx ) && ( breg_r1_dado_prev[3] !== breg_r1_dado_expected_prev[3] )
		&& ((breg_r1_dado_expected_prev[3] !== last_breg_r1_dado_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[3] = breg_r1_dado_expected_prev[3];
	end
	if (
		( breg_r1_dado_expected_prev[4] !== 1'bx ) && ( breg_r1_dado_prev[4] !== breg_r1_dado_expected_prev[4] )
		&& ((breg_r1_dado_expected_prev[4] !== last_breg_r1_dado_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[4] = breg_r1_dado_expected_prev[4];
	end
	if (
		( breg_r1_dado_expected_prev[5] !== 1'bx ) && ( breg_r1_dado_prev[5] !== breg_r1_dado_expected_prev[5] )
		&& ((breg_r1_dado_expected_prev[5] !== last_breg_r1_dado_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[5] = breg_r1_dado_expected_prev[5];
	end
	if (
		( breg_r1_dado_expected_prev[6] !== 1'bx ) && ( breg_r1_dado_prev[6] !== breg_r1_dado_expected_prev[6] )
		&& ((breg_r1_dado_expected_prev[6] !== last_breg_r1_dado_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[6] = breg_r1_dado_expected_prev[6];
	end
	if (
		( breg_r1_dado_expected_prev[7] !== 1'bx ) && ( breg_r1_dado_prev[7] !== breg_r1_dado_expected_prev[7] )
		&& ((breg_r1_dado_expected_prev[7] !== last_breg_r1_dado_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[7] = breg_r1_dado_expected_prev[7];
	end
	if (
		( breg_r1_dado_expected_prev[8] !== 1'bx ) && ( breg_r1_dado_prev[8] !== breg_r1_dado_expected_prev[8] )
		&& ((breg_r1_dado_expected_prev[8] !== last_breg_r1_dado_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[8] = breg_r1_dado_expected_prev[8];
	end
	if (
		( breg_r1_dado_expected_prev[9] !== 1'bx ) && ( breg_r1_dado_prev[9] !== breg_r1_dado_expected_prev[9] )
		&& ((breg_r1_dado_expected_prev[9] !== last_breg_r1_dado_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[9] = breg_r1_dado_expected_prev[9];
	end
	if (
		( breg_r1_dado_expected_prev[10] !== 1'bx ) && ( breg_r1_dado_prev[10] !== breg_r1_dado_expected_prev[10] )
		&& ((breg_r1_dado_expected_prev[10] !== last_breg_r1_dado_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[10] = breg_r1_dado_expected_prev[10];
	end
	if (
		( breg_r1_dado_expected_prev[11] !== 1'bx ) && ( breg_r1_dado_prev[11] !== breg_r1_dado_expected_prev[11] )
		&& ((breg_r1_dado_expected_prev[11] !== last_breg_r1_dado_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[11] = breg_r1_dado_expected_prev[11];
	end
	if (
		( breg_r1_dado_expected_prev[12] !== 1'bx ) && ( breg_r1_dado_prev[12] !== breg_r1_dado_expected_prev[12] )
		&& ((breg_r1_dado_expected_prev[12] !== last_breg_r1_dado_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[12] = breg_r1_dado_expected_prev[12];
	end
	if (
		( breg_r1_dado_expected_prev[13] !== 1'bx ) && ( breg_r1_dado_prev[13] !== breg_r1_dado_expected_prev[13] )
		&& ((breg_r1_dado_expected_prev[13] !== last_breg_r1_dado_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[13] = breg_r1_dado_expected_prev[13];
	end
	if (
		( breg_r1_dado_expected_prev[14] !== 1'bx ) && ( breg_r1_dado_prev[14] !== breg_r1_dado_expected_prev[14] )
		&& ((breg_r1_dado_expected_prev[14] !== last_breg_r1_dado_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[14] = breg_r1_dado_expected_prev[14];
	end
	if (
		( breg_r1_dado_expected_prev[15] !== 1'bx ) && ( breg_r1_dado_prev[15] !== breg_r1_dado_expected_prev[15] )
		&& ((breg_r1_dado_expected_prev[15] !== last_breg_r1_dado_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[15] = breg_r1_dado_expected_prev[15];
	end
	if (
		( breg_r1_dado_expected_prev[16] !== 1'bx ) && ( breg_r1_dado_prev[16] !== breg_r1_dado_expected_prev[16] )
		&& ((breg_r1_dado_expected_prev[16] !== last_breg_r1_dado_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[16] = breg_r1_dado_expected_prev[16];
	end
	if (
		( breg_r1_dado_expected_prev[17] !== 1'bx ) && ( breg_r1_dado_prev[17] !== breg_r1_dado_expected_prev[17] )
		&& ((breg_r1_dado_expected_prev[17] !== last_breg_r1_dado_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[17] = breg_r1_dado_expected_prev[17];
	end
	if (
		( breg_r1_dado_expected_prev[18] !== 1'bx ) && ( breg_r1_dado_prev[18] !== breg_r1_dado_expected_prev[18] )
		&& ((breg_r1_dado_expected_prev[18] !== last_breg_r1_dado_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[18] = breg_r1_dado_expected_prev[18];
	end
	if (
		( breg_r1_dado_expected_prev[19] !== 1'bx ) && ( breg_r1_dado_prev[19] !== breg_r1_dado_expected_prev[19] )
		&& ((breg_r1_dado_expected_prev[19] !== last_breg_r1_dado_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[19] = breg_r1_dado_expected_prev[19];
	end
	if (
		( breg_r1_dado_expected_prev[20] !== 1'bx ) && ( breg_r1_dado_prev[20] !== breg_r1_dado_expected_prev[20] )
		&& ((breg_r1_dado_expected_prev[20] !== last_breg_r1_dado_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[20] = breg_r1_dado_expected_prev[20];
	end
	if (
		( breg_r1_dado_expected_prev[21] !== 1'bx ) && ( breg_r1_dado_prev[21] !== breg_r1_dado_expected_prev[21] )
		&& ((breg_r1_dado_expected_prev[21] !== last_breg_r1_dado_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[21] = breg_r1_dado_expected_prev[21];
	end
	if (
		( breg_r1_dado_expected_prev[22] !== 1'bx ) && ( breg_r1_dado_prev[22] !== breg_r1_dado_expected_prev[22] )
		&& ((breg_r1_dado_expected_prev[22] !== last_breg_r1_dado_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[22] = breg_r1_dado_expected_prev[22];
	end
	if (
		( breg_r1_dado_expected_prev[23] !== 1'bx ) && ( breg_r1_dado_prev[23] !== breg_r1_dado_expected_prev[23] )
		&& ((breg_r1_dado_expected_prev[23] !== last_breg_r1_dado_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[23] = breg_r1_dado_expected_prev[23];
	end
	if (
		( breg_r1_dado_expected_prev[24] !== 1'bx ) && ( breg_r1_dado_prev[24] !== breg_r1_dado_expected_prev[24] )
		&& ((breg_r1_dado_expected_prev[24] !== last_breg_r1_dado_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[24] = breg_r1_dado_expected_prev[24];
	end
	if (
		( breg_r1_dado_expected_prev[25] !== 1'bx ) && ( breg_r1_dado_prev[25] !== breg_r1_dado_expected_prev[25] )
		&& ((breg_r1_dado_expected_prev[25] !== last_breg_r1_dado_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[25] = breg_r1_dado_expected_prev[25];
	end
	if (
		( breg_r1_dado_expected_prev[26] !== 1'bx ) && ( breg_r1_dado_prev[26] !== breg_r1_dado_expected_prev[26] )
		&& ((breg_r1_dado_expected_prev[26] !== last_breg_r1_dado_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[26] = breg_r1_dado_expected_prev[26];
	end
	if (
		( breg_r1_dado_expected_prev[27] !== 1'bx ) && ( breg_r1_dado_prev[27] !== breg_r1_dado_expected_prev[27] )
		&& ((breg_r1_dado_expected_prev[27] !== last_breg_r1_dado_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[27] = breg_r1_dado_expected_prev[27];
	end
	if (
		( breg_r1_dado_expected_prev[28] !== 1'bx ) && ( breg_r1_dado_prev[28] !== breg_r1_dado_expected_prev[28] )
		&& ((breg_r1_dado_expected_prev[28] !== last_breg_r1_dado_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[28] = breg_r1_dado_expected_prev[28];
	end
	if (
		( breg_r1_dado_expected_prev[29] !== 1'bx ) && ( breg_r1_dado_prev[29] !== breg_r1_dado_expected_prev[29] )
		&& ((breg_r1_dado_expected_prev[29] !== last_breg_r1_dado_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[29] = breg_r1_dado_expected_prev[29];
	end
	if (
		( breg_r1_dado_expected_prev[30] !== 1'bx ) && ( breg_r1_dado_prev[30] !== breg_r1_dado_expected_prev[30] )
		&& ((breg_r1_dado_expected_prev[30] !== last_breg_r1_dado_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[30] = breg_r1_dado_expected_prev[30];
	end
	if (
		( breg_r1_dado_expected_prev[31] !== 1'bx ) && ( breg_r1_dado_prev[31] !== breg_r1_dado_expected_prev[31] )
		&& ((breg_r1_dado_expected_prev[31] !== last_breg_r1_dado_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r1_dado[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r1_dado_expected_prev);
		$display ("     Real value = %b", breg_r1_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_breg_r1_dado_exp[31] = breg_r1_dado_expected_prev[31];
	end
	if (
		( breg_r2_dado_expected_prev[0] !== 1'bx ) && ( breg_r2_dado_prev[0] !== breg_r2_dado_expected_prev[0] )
		&& ((breg_r2_dado_expected_prev[0] !== last_breg_r2_dado_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[0] = breg_r2_dado_expected_prev[0];
	end
	if (
		( breg_r2_dado_expected_prev[1] !== 1'bx ) && ( breg_r2_dado_prev[1] !== breg_r2_dado_expected_prev[1] )
		&& ((breg_r2_dado_expected_prev[1] !== last_breg_r2_dado_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[1] = breg_r2_dado_expected_prev[1];
	end
	if (
		( breg_r2_dado_expected_prev[2] !== 1'bx ) && ( breg_r2_dado_prev[2] !== breg_r2_dado_expected_prev[2] )
		&& ((breg_r2_dado_expected_prev[2] !== last_breg_r2_dado_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[2] = breg_r2_dado_expected_prev[2];
	end
	if (
		( breg_r2_dado_expected_prev[3] !== 1'bx ) && ( breg_r2_dado_prev[3] !== breg_r2_dado_expected_prev[3] )
		&& ((breg_r2_dado_expected_prev[3] !== last_breg_r2_dado_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[3] = breg_r2_dado_expected_prev[3];
	end
	if (
		( breg_r2_dado_expected_prev[4] !== 1'bx ) && ( breg_r2_dado_prev[4] !== breg_r2_dado_expected_prev[4] )
		&& ((breg_r2_dado_expected_prev[4] !== last_breg_r2_dado_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[4] = breg_r2_dado_expected_prev[4];
	end
	if (
		( breg_r2_dado_expected_prev[5] !== 1'bx ) && ( breg_r2_dado_prev[5] !== breg_r2_dado_expected_prev[5] )
		&& ((breg_r2_dado_expected_prev[5] !== last_breg_r2_dado_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[5] = breg_r2_dado_expected_prev[5];
	end
	if (
		( breg_r2_dado_expected_prev[6] !== 1'bx ) && ( breg_r2_dado_prev[6] !== breg_r2_dado_expected_prev[6] )
		&& ((breg_r2_dado_expected_prev[6] !== last_breg_r2_dado_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[6] = breg_r2_dado_expected_prev[6];
	end
	if (
		( breg_r2_dado_expected_prev[7] !== 1'bx ) && ( breg_r2_dado_prev[7] !== breg_r2_dado_expected_prev[7] )
		&& ((breg_r2_dado_expected_prev[7] !== last_breg_r2_dado_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[7] = breg_r2_dado_expected_prev[7];
	end
	if (
		( breg_r2_dado_expected_prev[8] !== 1'bx ) && ( breg_r2_dado_prev[8] !== breg_r2_dado_expected_prev[8] )
		&& ((breg_r2_dado_expected_prev[8] !== last_breg_r2_dado_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[8] = breg_r2_dado_expected_prev[8];
	end
	if (
		( breg_r2_dado_expected_prev[9] !== 1'bx ) && ( breg_r2_dado_prev[9] !== breg_r2_dado_expected_prev[9] )
		&& ((breg_r2_dado_expected_prev[9] !== last_breg_r2_dado_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[9] = breg_r2_dado_expected_prev[9];
	end
	if (
		( breg_r2_dado_expected_prev[10] !== 1'bx ) && ( breg_r2_dado_prev[10] !== breg_r2_dado_expected_prev[10] )
		&& ((breg_r2_dado_expected_prev[10] !== last_breg_r2_dado_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[10] = breg_r2_dado_expected_prev[10];
	end
	if (
		( breg_r2_dado_expected_prev[11] !== 1'bx ) && ( breg_r2_dado_prev[11] !== breg_r2_dado_expected_prev[11] )
		&& ((breg_r2_dado_expected_prev[11] !== last_breg_r2_dado_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[11] = breg_r2_dado_expected_prev[11];
	end
	if (
		( breg_r2_dado_expected_prev[12] !== 1'bx ) && ( breg_r2_dado_prev[12] !== breg_r2_dado_expected_prev[12] )
		&& ((breg_r2_dado_expected_prev[12] !== last_breg_r2_dado_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[12] = breg_r2_dado_expected_prev[12];
	end
	if (
		( breg_r2_dado_expected_prev[13] !== 1'bx ) && ( breg_r2_dado_prev[13] !== breg_r2_dado_expected_prev[13] )
		&& ((breg_r2_dado_expected_prev[13] !== last_breg_r2_dado_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[13] = breg_r2_dado_expected_prev[13];
	end
	if (
		( breg_r2_dado_expected_prev[14] !== 1'bx ) && ( breg_r2_dado_prev[14] !== breg_r2_dado_expected_prev[14] )
		&& ((breg_r2_dado_expected_prev[14] !== last_breg_r2_dado_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[14] = breg_r2_dado_expected_prev[14];
	end
	if (
		( breg_r2_dado_expected_prev[15] !== 1'bx ) && ( breg_r2_dado_prev[15] !== breg_r2_dado_expected_prev[15] )
		&& ((breg_r2_dado_expected_prev[15] !== last_breg_r2_dado_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[15] = breg_r2_dado_expected_prev[15];
	end
	if (
		( breg_r2_dado_expected_prev[16] !== 1'bx ) && ( breg_r2_dado_prev[16] !== breg_r2_dado_expected_prev[16] )
		&& ((breg_r2_dado_expected_prev[16] !== last_breg_r2_dado_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[16] = breg_r2_dado_expected_prev[16];
	end
	if (
		( breg_r2_dado_expected_prev[17] !== 1'bx ) && ( breg_r2_dado_prev[17] !== breg_r2_dado_expected_prev[17] )
		&& ((breg_r2_dado_expected_prev[17] !== last_breg_r2_dado_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[17] = breg_r2_dado_expected_prev[17];
	end
	if (
		( breg_r2_dado_expected_prev[18] !== 1'bx ) && ( breg_r2_dado_prev[18] !== breg_r2_dado_expected_prev[18] )
		&& ((breg_r2_dado_expected_prev[18] !== last_breg_r2_dado_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[18] = breg_r2_dado_expected_prev[18];
	end
	if (
		( breg_r2_dado_expected_prev[19] !== 1'bx ) && ( breg_r2_dado_prev[19] !== breg_r2_dado_expected_prev[19] )
		&& ((breg_r2_dado_expected_prev[19] !== last_breg_r2_dado_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[19] = breg_r2_dado_expected_prev[19];
	end
	if (
		( breg_r2_dado_expected_prev[20] !== 1'bx ) && ( breg_r2_dado_prev[20] !== breg_r2_dado_expected_prev[20] )
		&& ((breg_r2_dado_expected_prev[20] !== last_breg_r2_dado_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[20] = breg_r2_dado_expected_prev[20];
	end
	if (
		( breg_r2_dado_expected_prev[21] !== 1'bx ) && ( breg_r2_dado_prev[21] !== breg_r2_dado_expected_prev[21] )
		&& ((breg_r2_dado_expected_prev[21] !== last_breg_r2_dado_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[21] = breg_r2_dado_expected_prev[21];
	end
	if (
		( breg_r2_dado_expected_prev[22] !== 1'bx ) && ( breg_r2_dado_prev[22] !== breg_r2_dado_expected_prev[22] )
		&& ((breg_r2_dado_expected_prev[22] !== last_breg_r2_dado_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[22] = breg_r2_dado_expected_prev[22];
	end
	if (
		( breg_r2_dado_expected_prev[23] !== 1'bx ) && ( breg_r2_dado_prev[23] !== breg_r2_dado_expected_prev[23] )
		&& ((breg_r2_dado_expected_prev[23] !== last_breg_r2_dado_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[23] = breg_r2_dado_expected_prev[23];
	end
	if (
		( breg_r2_dado_expected_prev[24] !== 1'bx ) && ( breg_r2_dado_prev[24] !== breg_r2_dado_expected_prev[24] )
		&& ((breg_r2_dado_expected_prev[24] !== last_breg_r2_dado_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[24] = breg_r2_dado_expected_prev[24];
	end
	if (
		( breg_r2_dado_expected_prev[25] !== 1'bx ) && ( breg_r2_dado_prev[25] !== breg_r2_dado_expected_prev[25] )
		&& ((breg_r2_dado_expected_prev[25] !== last_breg_r2_dado_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[25] = breg_r2_dado_expected_prev[25];
	end
	if (
		( breg_r2_dado_expected_prev[26] !== 1'bx ) && ( breg_r2_dado_prev[26] !== breg_r2_dado_expected_prev[26] )
		&& ((breg_r2_dado_expected_prev[26] !== last_breg_r2_dado_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[26] = breg_r2_dado_expected_prev[26];
	end
	if (
		( breg_r2_dado_expected_prev[27] !== 1'bx ) && ( breg_r2_dado_prev[27] !== breg_r2_dado_expected_prev[27] )
		&& ((breg_r2_dado_expected_prev[27] !== last_breg_r2_dado_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[27] = breg_r2_dado_expected_prev[27];
	end
	if (
		( breg_r2_dado_expected_prev[28] !== 1'bx ) && ( breg_r2_dado_prev[28] !== breg_r2_dado_expected_prev[28] )
		&& ((breg_r2_dado_expected_prev[28] !== last_breg_r2_dado_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[28] = breg_r2_dado_expected_prev[28];
	end
	if (
		( breg_r2_dado_expected_prev[29] !== 1'bx ) && ( breg_r2_dado_prev[29] !== breg_r2_dado_expected_prev[29] )
		&& ((breg_r2_dado_expected_prev[29] !== last_breg_r2_dado_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[29] = breg_r2_dado_expected_prev[29];
	end
	if (
		( breg_r2_dado_expected_prev[30] !== 1'bx ) && ( breg_r2_dado_prev[30] !== breg_r2_dado_expected_prev[30] )
		&& ((breg_r2_dado_expected_prev[30] !== last_breg_r2_dado_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[30] = breg_r2_dado_expected_prev[30];
	end
	if (
		( breg_r2_dado_expected_prev[31] !== 1'bx ) && ( breg_r2_dado_prev[31] !== breg_r2_dado_expected_prev[31] )
		&& ((breg_r2_dado_expected_prev[31] !== last_breg_r2_dado_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port breg_r2_dado[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", breg_r2_dado_expected_prev);
		$display ("     Real value = %b", breg_r2_dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_breg_r2_dado_exp[31] = breg_r2_dado_expected_prev[31];
	end
	if (
		( ctr_branch_expected_prev !== 1'bx ) && ( ctr_branch_prev !== ctr_branch_expected_prev )
		&& ((ctr_branch_expected_prev !== last_ctr_branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_branch_expected_prev);
		$display ("     Real value = %b", ctr_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ctr_branch_exp = ctr_branch_expected_prev;
	end
	if (
		( ctr_branchn_expected_prev !== 1'bx ) && ( ctr_branchn_prev !== ctr_branchn_expected_prev )
		&& ((ctr_branchn_expected_prev !== last_ctr_branchn_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_branchn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_branchn_expected_prev);
		$display ("     Real value = %b", ctr_branchn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ctr_branchn_exp = ctr_branchn_expected_prev;
	end
	if (
		( ctr_escreve_mem_expected_prev !== 1'bx ) && ( ctr_escreve_mem_prev !== ctr_escreve_mem_expected_prev )
		&& ((ctr_escreve_mem_expected_prev !== last_ctr_escreve_mem_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_escreve_mem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_escreve_mem_expected_prev);
		$display ("     Real value = %b", ctr_escreve_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ctr_escreve_mem_exp = ctr_escreve_mem_expected_prev;
	end
	if (
		( ctr_escreve_reg_expected_prev !== 1'bx ) && ( ctr_escreve_reg_prev !== ctr_escreve_reg_expected_prev )
		&& ((ctr_escreve_reg_expected_prev !== last_ctr_escreve_reg_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_escreve_reg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_escreve_reg_expected_prev);
		$display ("     Real value = %b", ctr_escreve_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ctr_escreve_reg_exp = ctr_escreve_reg_expected_prev;
	end
	if (
		( ctr_jal_expected_prev !== 1'bx ) && ( ctr_jal_prev !== ctr_jal_expected_prev )
		&& ((ctr_jal_expected_prev !== last_ctr_jal_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_jal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_jal_expected_prev);
		$display ("     Real value = %b", ctr_jal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ctr_jal_exp = ctr_jal_expected_prev;
	end
	if (
		( ctr_jerro_expected_prev !== 1'bx ) && ( ctr_jerro_prev !== ctr_jerro_expected_prev )
		&& ((ctr_jerro_expected_prev !== last_ctr_jerro_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_jerro :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_jerro_expected_prev);
		$display ("     Real value = %b", ctr_jerro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ctr_jerro_exp = ctr_jerro_expected_prev;
	end
	if (
		( ctr_jump_expected_prev !== 1'bx ) && ( ctr_jump_prev !== ctr_jump_expected_prev )
		&& ((ctr_jump_expected_prev !== last_ctr_jump_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_jump_expected_prev);
		$display ("     Real value = %b", ctr_jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ctr_jump_exp = ctr_jump_expected_prev;
	end
	if (
		( ctr_le_mem_expected_prev !== 1'bx ) && ( ctr_le_mem_prev !== ctr_le_mem_expected_prev )
		&& ((ctr_le_mem_expected_prev !== last_ctr_le_mem_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_le_mem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_le_mem_expected_prev);
		$display ("     Real value = %b", ctr_le_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ctr_le_mem_exp = ctr_le_mem_expected_prev;
	end
	if (
		( ctr_lui_expected_prev !== 1'bx ) && ( ctr_lui_prev !== ctr_lui_expected_prev )
		&& ((ctr_lui_expected_prev !== last_ctr_lui_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_lui :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_lui_expected_prev);
		$display ("     Real value = %b", ctr_lui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ctr_lui_exp = ctr_lui_expected_prev;
	end
	if (
		( ctr_mem_para_reg_expected_prev !== 1'bx ) && ( ctr_mem_para_reg_prev !== ctr_mem_para_reg_expected_prev )
		&& ((ctr_mem_para_reg_expected_prev !== last_ctr_mem_para_reg_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_mem_para_reg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_mem_para_reg_expected_prev);
		$display ("     Real value = %b", ctr_mem_para_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ctr_mem_para_reg_exp = ctr_mem_para_reg_expected_prev;
	end
	if (
		( ctr_reg_ds_expected_prev !== 1'bx ) && ( ctr_reg_ds_prev !== ctr_reg_ds_expected_prev )
		&& ((ctr_reg_ds_expected_prev !== last_ctr_reg_ds_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctr_reg_ds :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctr_reg_ds_expected_prev);
		$display ("     Real value = %b", ctr_reg_ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ctr_reg_ds_exp = ctr_reg_ds_expected_prev;
	end
	if (
		( ctrl_op_ula_expected_prev[0] !== 1'bx ) && ( ctrl_op_ula_prev[0] !== ctrl_op_ula_expected_prev[0] )
		&& ((ctrl_op_ula_expected_prev[0] !== last_ctrl_op_ula_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_op_ula[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_op_ula_expected_prev);
		$display ("     Real value = %b", ctrl_op_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ctrl_op_ula_exp[0] = ctrl_op_ula_expected_prev[0];
	end
	if (
		( ctrl_op_ula_expected_prev[1] !== 1'bx ) && ( ctrl_op_ula_prev[1] !== ctrl_op_ula_expected_prev[1] )
		&& ((ctrl_op_ula_expected_prev[1] !== last_ctrl_op_ula_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_op_ula[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_op_ula_expected_prev);
		$display ("     Real value = %b", ctrl_op_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ctrl_op_ula_exp[1] = ctrl_op_ula_expected_prev[1];
	end
	if (
		( ctrl_op_ula_expected_prev[2] !== 1'bx ) && ( ctrl_op_ula_prev[2] !== ctrl_op_ula_expected_prev[2] )
		&& ((ctrl_op_ula_expected_prev[2] !== last_ctrl_op_ula_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_op_ula[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_op_ula_expected_prev);
		$display ("     Real value = %b", ctrl_op_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ctrl_op_ula_exp[2] = ctrl_op_ula_expected_prev[2];
	end
	if (
		( ctrl_op_ula_expected_prev[3] !== 1'bx ) && ( ctrl_op_ula_prev[3] !== ctrl_op_ula_expected_prev[3] )
		&& ((ctrl_op_ula_expected_prev[3] !== last_ctrl_op_ula_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_op_ula[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_op_ula_expected_prev);
		$display ("     Real value = %b", ctrl_op_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ctrl_op_ula_exp[3] = ctrl_op_ula_expected_prev[3];
	end
	if (
		( din_breg_expected_prev[0] !== 1'bx ) && ( din_breg_prev[0] !== din_breg_expected_prev[0] )
		&& ((din_breg_expected_prev[0] !== last_din_breg_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[0] = din_breg_expected_prev[0];
	end
	if (
		( din_breg_expected_prev[1] !== 1'bx ) && ( din_breg_prev[1] !== din_breg_expected_prev[1] )
		&& ((din_breg_expected_prev[1] !== last_din_breg_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[1] = din_breg_expected_prev[1];
	end
	if (
		( din_breg_expected_prev[2] !== 1'bx ) && ( din_breg_prev[2] !== din_breg_expected_prev[2] )
		&& ((din_breg_expected_prev[2] !== last_din_breg_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[2] = din_breg_expected_prev[2];
	end
	if (
		( din_breg_expected_prev[3] !== 1'bx ) && ( din_breg_prev[3] !== din_breg_expected_prev[3] )
		&& ((din_breg_expected_prev[3] !== last_din_breg_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[3] = din_breg_expected_prev[3];
	end
	if (
		( din_breg_expected_prev[4] !== 1'bx ) && ( din_breg_prev[4] !== din_breg_expected_prev[4] )
		&& ((din_breg_expected_prev[4] !== last_din_breg_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[4] = din_breg_expected_prev[4];
	end
	if (
		( din_breg_expected_prev[5] !== 1'bx ) && ( din_breg_prev[5] !== din_breg_expected_prev[5] )
		&& ((din_breg_expected_prev[5] !== last_din_breg_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[5] = din_breg_expected_prev[5];
	end
	if (
		( din_breg_expected_prev[6] !== 1'bx ) && ( din_breg_prev[6] !== din_breg_expected_prev[6] )
		&& ((din_breg_expected_prev[6] !== last_din_breg_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[6] = din_breg_expected_prev[6];
	end
	if (
		( din_breg_expected_prev[7] !== 1'bx ) && ( din_breg_prev[7] !== din_breg_expected_prev[7] )
		&& ((din_breg_expected_prev[7] !== last_din_breg_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[7] = din_breg_expected_prev[7];
	end
	if (
		( din_breg_expected_prev[8] !== 1'bx ) && ( din_breg_prev[8] !== din_breg_expected_prev[8] )
		&& ((din_breg_expected_prev[8] !== last_din_breg_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[8] = din_breg_expected_prev[8];
	end
	if (
		( din_breg_expected_prev[9] !== 1'bx ) && ( din_breg_prev[9] !== din_breg_expected_prev[9] )
		&& ((din_breg_expected_prev[9] !== last_din_breg_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[9] = din_breg_expected_prev[9];
	end
	if (
		( din_breg_expected_prev[10] !== 1'bx ) && ( din_breg_prev[10] !== din_breg_expected_prev[10] )
		&& ((din_breg_expected_prev[10] !== last_din_breg_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[10] = din_breg_expected_prev[10];
	end
	if (
		( din_breg_expected_prev[11] !== 1'bx ) && ( din_breg_prev[11] !== din_breg_expected_prev[11] )
		&& ((din_breg_expected_prev[11] !== last_din_breg_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[11] = din_breg_expected_prev[11];
	end
	if (
		( din_breg_expected_prev[12] !== 1'bx ) && ( din_breg_prev[12] !== din_breg_expected_prev[12] )
		&& ((din_breg_expected_prev[12] !== last_din_breg_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[12] = din_breg_expected_prev[12];
	end
	if (
		( din_breg_expected_prev[13] !== 1'bx ) && ( din_breg_prev[13] !== din_breg_expected_prev[13] )
		&& ((din_breg_expected_prev[13] !== last_din_breg_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[13] = din_breg_expected_prev[13];
	end
	if (
		( din_breg_expected_prev[14] !== 1'bx ) && ( din_breg_prev[14] !== din_breg_expected_prev[14] )
		&& ((din_breg_expected_prev[14] !== last_din_breg_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[14] = din_breg_expected_prev[14];
	end
	if (
		( din_breg_expected_prev[15] !== 1'bx ) && ( din_breg_prev[15] !== din_breg_expected_prev[15] )
		&& ((din_breg_expected_prev[15] !== last_din_breg_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[15] = din_breg_expected_prev[15];
	end
	if (
		( din_breg_expected_prev[16] !== 1'bx ) && ( din_breg_prev[16] !== din_breg_expected_prev[16] )
		&& ((din_breg_expected_prev[16] !== last_din_breg_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[16] = din_breg_expected_prev[16];
	end
	if (
		( din_breg_expected_prev[17] !== 1'bx ) && ( din_breg_prev[17] !== din_breg_expected_prev[17] )
		&& ((din_breg_expected_prev[17] !== last_din_breg_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[17] = din_breg_expected_prev[17];
	end
	if (
		( din_breg_expected_prev[18] !== 1'bx ) && ( din_breg_prev[18] !== din_breg_expected_prev[18] )
		&& ((din_breg_expected_prev[18] !== last_din_breg_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[18] = din_breg_expected_prev[18];
	end
	if (
		( din_breg_expected_prev[19] !== 1'bx ) && ( din_breg_prev[19] !== din_breg_expected_prev[19] )
		&& ((din_breg_expected_prev[19] !== last_din_breg_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[19] = din_breg_expected_prev[19];
	end
	if (
		( din_breg_expected_prev[20] !== 1'bx ) && ( din_breg_prev[20] !== din_breg_expected_prev[20] )
		&& ((din_breg_expected_prev[20] !== last_din_breg_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[20] = din_breg_expected_prev[20];
	end
	if (
		( din_breg_expected_prev[21] !== 1'bx ) && ( din_breg_prev[21] !== din_breg_expected_prev[21] )
		&& ((din_breg_expected_prev[21] !== last_din_breg_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[21] = din_breg_expected_prev[21];
	end
	if (
		( din_breg_expected_prev[22] !== 1'bx ) && ( din_breg_prev[22] !== din_breg_expected_prev[22] )
		&& ((din_breg_expected_prev[22] !== last_din_breg_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[22] = din_breg_expected_prev[22];
	end
	if (
		( din_breg_expected_prev[23] !== 1'bx ) && ( din_breg_prev[23] !== din_breg_expected_prev[23] )
		&& ((din_breg_expected_prev[23] !== last_din_breg_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[23] = din_breg_expected_prev[23];
	end
	if (
		( din_breg_expected_prev[24] !== 1'bx ) && ( din_breg_prev[24] !== din_breg_expected_prev[24] )
		&& ((din_breg_expected_prev[24] !== last_din_breg_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[24] = din_breg_expected_prev[24];
	end
	if (
		( din_breg_expected_prev[25] !== 1'bx ) && ( din_breg_prev[25] !== din_breg_expected_prev[25] )
		&& ((din_breg_expected_prev[25] !== last_din_breg_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[25] = din_breg_expected_prev[25];
	end
	if (
		( din_breg_expected_prev[26] !== 1'bx ) && ( din_breg_prev[26] !== din_breg_expected_prev[26] )
		&& ((din_breg_expected_prev[26] !== last_din_breg_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[26] = din_breg_expected_prev[26];
	end
	if (
		( din_breg_expected_prev[27] !== 1'bx ) && ( din_breg_prev[27] !== din_breg_expected_prev[27] )
		&& ((din_breg_expected_prev[27] !== last_din_breg_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[27] = din_breg_expected_prev[27];
	end
	if (
		( din_breg_expected_prev[28] !== 1'bx ) && ( din_breg_prev[28] !== din_breg_expected_prev[28] )
		&& ((din_breg_expected_prev[28] !== last_din_breg_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[28] = din_breg_expected_prev[28];
	end
	if (
		( din_breg_expected_prev[29] !== 1'bx ) && ( din_breg_prev[29] !== din_breg_expected_prev[29] )
		&& ((din_breg_expected_prev[29] !== last_din_breg_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[29] = din_breg_expected_prev[29];
	end
	if (
		( din_breg_expected_prev[30] !== 1'bx ) && ( din_breg_prev[30] !== din_breg_expected_prev[30] )
		&& ((din_breg_expected_prev[30] !== last_din_breg_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[30] = din_breg_expected_prev[30];
	end
	if (
		( din_breg_expected_prev[31] !== 1'bx ) && ( din_breg_prev[31] !== din_breg_expected_prev[31] )
		&& ((din_breg_expected_prev[31] !== last_din_breg_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port din_breg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", din_breg_expected_prev);
		$display ("     Real value = %b", din_breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_din_breg_exp[31] = din_breg_expected_prev[31];
	end
	if (
		( OUTPUT_expected_prev[0] !== 1'bx ) && ( OUTPUT_prev[0] !== OUTPUT_expected_prev[0] )
		&& ((OUTPUT_expected_prev[0] !== last_OUTPUT_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[0] = OUTPUT_expected_prev[0];
	end
	if (
		( OUTPUT_expected_prev[1] !== 1'bx ) && ( OUTPUT_prev[1] !== OUTPUT_expected_prev[1] )
		&& ((OUTPUT_expected_prev[1] !== last_OUTPUT_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[1] = OUTPUT_expected_prev[1];
	end
	if (
		( OUTPUT_expected_prev[2] !== 1'bx ) && ( OUTPUT_prev[2] !== OUTPUT_expected_prev[2] )
		&& ((OUTPUT_expected_prev[2] !== last_OUTPUT_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[2] = OUTPUT_expected_prev[2];
	end
	if (
		( OUTPUT_expected_prev[3] !== 1'bx ) && ( OUTPUT_prev[3] !== OUTPUT_expected_prev[3] )
		&& ((OUTPUT_expected_prev[3] !== last_OUTPUT_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[3] = OUTPUT_expected_prev[3];
	end
	if (
		( OUTPUT_expected_prev[4] !== 1'bx ) && ( OUTPUT_prev[4] !== OUTPUT_expected_prev[4] )
		&& ((OUTPUT_expected_prev[4] !== last_OUTPUT_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[4] = OUTPUT_expected_prev[4];
	end
	if (
		( OUTPUT_expected_prev[5] !== 1'bx ) && ( OUTPUT_prev[5] !== OUTPUT_expected_prev[5] )
		&& ((OUTPUT_expected_prev[5] !== last_OUTPUT_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[5] = OUTPUT_expected_prev[5];
	end
	if (
		( OUTPUT_expected_prev[6] !== 1'bx ) && ( OUTPUT_prev[6] !== OUTPUT_expected_prev[6] )
		&& ((OUTPUT_expected_prev[6] !== last_OUTPUT_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[6] = OUTPUT_expected_prev[6];
	end
	if (
		( OUTPUT_expected_prev[7] !== 1'bx ) && ( OUTPUT_prev[7] !== OUTPUT_expected_prev[7] )
		&& ((OUTPUT_expected_prev[7] !== last_OUTPUT_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[7] = OUTPUT_expected_prev[7];
	end
	if (
		( OUTPUT_expected_prev[8] !== 1'bx ) && ( OUTPUT_prev[8] !== OUTPUT_expected_prev[8] )
		&& ((OUTPUT_expected_prev[8] !== last_OUTPUT_exp[8]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[8] = OUTPUT_expected_prev[8];
	end
	if (
		( OUTPUT_expected_prev[9] !== 1'bx ) && ( OUTPUT_prev[9] !== OUTPUT_expected_prev[9] )
		&& ((OUTPUT_expected_prev[9] !== last_OUTPUT_exp[9]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[9] = OUTPUT_expected_prev[9];
	end
	if (
		( OUTPUT_expected_prev[10] !== 1'bx ) && ( OUTPUT_prev[10] !== OUTPUT_expected_prev[10] )
		&& ((OUTPUT_expected_prev[10] !== last_OUTPUT_exp[10]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[10] = OUTPUT_expected_prev[10];
	end
	if (
		( OUTPUT_expected_prev[11] !== 1'bx ) && ( OUTPUT_prev[11] !== OUTPUT_expected_prev[11] )
		&& ((OUTPUT_expected_prev[11] !== last_OUTPUT_exp[11]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[11] = OUTPUT_expected_prev[11];
	end
	if (
		( OUTPUT_expected_prev[12] !== 1'bx ) && ( OUTPUT_prev[12] !== OUTPUT_expected_prev[12] )
		&& ((OUTPUT_expected_prev[12] !== last_OUTPUT_exp[12]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[12] = OUTPUT_expected_prev[12];
	end
	if (
		( OUTPUT_expected_prev[13] !== 1'bx ) && ( OUTPUT_prev[13] !== OUTPUT_expected_prev[13] )
		&& ((OUTPUT_expected_prev[13] !== last_OUTPUT_exp[13]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[13] = OUTPUT_expected_prev[13];
	end
	if (
		( OUTPUT_expected_prev[14] !== 1'bx ) && ( OUTPUT_prev[14] !== OUTPUT_expected_prev[14] )
		&& ((OUTPUT_expected_prev[14] !== last_OUTPUT_exp[14]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[14] = OUTPUT_expected_prev[14];
	end
	if (
		( OUTPUT_expected_prev[15] !== 1'bx ) && ( OUTPUT_prev[15] !== OUTPUT_expected_prev[15] )
		&& ((OUTPUT_expected_prev[15] !== last_OUTPUT_exp[15]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[15] = OUTPUT_expected_prev[15];
	end
	if (
		( OUTPUT_expected_prev[16] !== 1'bx ) && ( OUTPUT_prev[16] !== OUTPUT_expected_prev[16] )
		&& ((OUTPUT_expected_prev[16] !== last_OUTPUT_exp[16]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[16] = OUTPUT_expected_prev[16];
	end
	if (
		( OUTPUT_expected_prev[17] !== 1'bx ) && ( OUTPUT_prev[17] !== OUTPUT_expected_prev[17] )
		&& ((OUTPUT_expected_prev[17] !== last_OUTPUT_exp[17]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[17] = OUTPUT_expected_prev[17];
	end
	if (
		( OUTPUT_expected_prev[18] !== 1'bx ) && ( OUTPUT_prev[18] !== OUTPUT_expected_prev[18] )
		&& ((OUTPUT_expected_prev[18] !== last_OUTPUT_exp[18]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[18] = OUTPUT_expected_prev[18];
	end
	if (
		( OUTPUT_expected_prev[19] !== 1'bx ) && ( OUTPUT_prev[19] !== OUTPUT_expected_prev[19] )
		&& ((OUTPUT_expected_prev[19] !== last_OUTPUT_exp[19]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[19] = OUTPUT_expected_prev[19];
	end
	if (
		( OUTPUT_expected_prev[20] !== 1'bx ) && ( OUTPUT_prev[20] !== OUTPUT_expected_prev[20] )
		&& ((OUTPUT_expected_prev[20] !== last_OUTPUT_exp[20]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[20] = OUTPUT_expected_prev[20];
	end
	if (
		( OUTPUT_expected_prev[21] !== 1'bx ) && ( OUTPUT_prev[21] !== OUTPUT_expected_prev[21] )
		&& ((OUTPUT_expected_prev[21] !== last_OUTPUT_exp[21]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[21] = OUTPUT_expected_prev[21];
	end
	if (
		( OUTPUT_expected_prev[22] !== 1'bx ) && ( OUTPUT_prev[22] !== OUTPUT_expected_prev[22] )
		&& ((OUTPUT_expected_prev[22] !== last_OUTPUT_exp[22]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[22] = OUTPUT_expected_prev[22];
	end
	if (
		( OUTPUT_expected_prev[23] !== 1'bx ) && ( OUTPUT_prev[23] !== OUTPUT_expected_prev[23] )
		&& ((OUTPUT_expected_prev[23] !== last_OUTPUT_exp[23]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[23] = OUTPUT_expected_prev[23];
	end
	if (
		( OUTPUT_expected_prev[24] !== 1'bx ) && ( OUTPUT_prev[24] !== OUTPUT_expected_prev[24] )
		&& ((OUTPUT_expected_prev[24] !== last_OUTPUT_exp[24]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[24] = OUTPUT_expected_prev[24];
	end
	if (
		( OUTPUT_expected_prev[25] !== 1'bx ) && ( OUTPUT_prev[25] !== OUTPUT_expected_prev[25] )
		&& ((OUTPUT_expected_prev[25] !== last_OUTPUT_exp[25]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[25] = OUTPUT_expected_prev[25];
	end
	if (
		( OUTPUT_expected_prev[26] !== 1'bx ) && ( OUTPUT_prev[26] !== OUTPUT_expected_prev[26] )
		&& ((OUTPUT_expected_prev[26] !== last_OUTPUT_exp[26]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[26] = OUTPUT_expected_prev[26];
	end
	if (
		( OUTPUT_expected_prev[27] !== 1'bx ) && ( OUTPUT_prev[27] !== OUTPUT_expected_prev[27] )
		&& ((OUTPUT_expected_prev[27] !== last_OUTPUT_exp[27]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[27] = OUTPUT_expected_prev[27];
	end
	if (
		( OUTPUT_expected_prev[28] !== 1'bx ) && ( OUTPUT_prev[28] !== OUTPUT_expected_prev[28] )
		&& ((OUTPUT_expected_prev[28] !== last_OUTPUT_exp[28]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[28] = OUTPUT_expected_prev[28];
	end
	if (
		( OUTPUT_expected_prev[29] !== 1'bx ) && ( OUTPUT_prev[29] !== OUTPUT_expected_prev[29] )
		&& ((OUTPUT_expected_prev[29] !== last_OUTPUT_exp[29]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[29] = OUTPUT_expected_prev[29];
	end
	if (
		( OUTPUT_expected_prev[30] !== 1'bx ) && ( OUTPUT_prev[30] !== OUTPUT_expected_prev[30] )
		&& ((OUTPUT_expected_prev[30] !== last_OUTPUT_exp[30]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[30] = OUTPUT_expected_prev[30];
	end
	if (
		( OUTPUT_expected_prev[31] !== 1'bx ) && ( OUTPUT_prev[31] !== OUTPUT_expected_prev[31] )
		&& ((OUTPUT_expected_prev[31] !== last_OUTPUT_exp[31]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_OUTPUT_exp[31] = OUTPUT_expected_prev[31];
	end
	if (
		( saida_epc_expected_prev[0] !== 1'bx ) && ( saida_epc_prev[0] !== saida_epc_expected_prev[0] )
		&& ((saida_epc_expected_prev[0] !== last_saida_epc_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[0] = saida_epc_expected_prev[0];
	end
	if (
		( saida_epc_expected_prev[1] !== 1'bx ) && ( saida_epc_prev[1] !== saida_epc_expected_prev[1] )
		&& ((saida_epc_expected_prev[1] !== last_saida_epc_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[1] = saida_epc_expected_prev[1];
	end
	if (
		( saida_epc_expected_prev[2] !== 1'bx ) && ( saida_epc_prev[2] !== saida_epc_expected_prev[2] )
		&& ((saida_epc_expected_prev[2] !== last_saida_epc_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[2] = saida_epc_expected_prev[2];
	end
	if (
		( saida_epc_expected_prev[3] !== 1'bx ) && ( saida_epc_prev[3] !== saida_epc_expected_prev[3] )
		&& ((saida_epc_expected_prev[3] !== last_saida_epc_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[3] = saida_epc_expected_prev[3];
	end
	if (
		( saida_epc_expected_prev[4] !== 1'bx ) && ( saida_epc_prev[4] !== saida_epc_expected_prev[4] )
		&& ((saida_epc_expected_prev[4] !== last_saida_epc_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[4] = saida_epc_expected_prev[4];
	end
	if (
		( saida_epc_expected_prev[5] !== 1'bx ) && ( saida_epc_prev[5] !== saida_epc_expected_prev[5] )
		&& ((saida_epc_expected_prev[5] !== last_saida_epc_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[5] = saida_epc_expected_prev[5];
	end
	if (
		( saida_epc_expected_prev[6] !== 1'bx ) && ( saida_epc_prev[6] !== saida_epc_expected_prev[6] )
		&& ((saida_epc_expected_prev[6] !== last_saida_epc_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[6] = saida_epc_expected_prev[6];
	end
	if (
		( saida_epc_expected_prev[7] !== 1'bx ) && ( saida_epc_prev[7] !== saida_epc_expected_prev[7] )
		&& ((saida_epc_expected_prev[7] !== last_saida_epc_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[7] = saida_epc_expected_prev[7];
	end
	if (
		( saida_epc_expected_prev[8] !== 1'bx ) && ( saida_epc_prev[8] !== saida_epc_expected_prev[8] )
		&& ((saida_epc_expected_prev[8] !== last_saida_epc_exp[8]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[8] = saida_epc_expected_prev[8];
	end
	if (
		( saida_epc_expected_prev[9] !== 1'bx ) && ( saida_epc_prev[9] !== saida_epc_expected_prev[9] )
		&& ((saida_epc_expected_prev[9] !== last_saida_epc_exp[9]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[9] = saida_epc_expected_prev[9];
	end
	if (
		( saida_epc_expected_prev[10] !== 1'bx ) && ( saida_epc_prev[10] !== saida_epc_expected_prev[10] )
		&& ((saida_epc_expected_prev[10] !== last_saida_epc_exp[10]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[10] = saida_epc_expected_prev[10];
	end
	if (
		( saida_epc_expected_prev[11] !== 1'bx ) && ( saida_epc_prev[11] !== saida_epc_expected_prev[11] )
		&& ((saida_epc_expected_prev[11] !== last_saida_epc_exp[11]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[11] = saida_epc_expected_prev[11];
	end
	if (
		( saida_epc_expected_prev[12] !== 1'bx ) && ( saida_epc_prev[12] !== saida_epc_expected_prev[12] )
		&& ((saida_epc_expected_prev[12] !== last_saida_epc_exp[12]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[12] = saida_epc_expected_prev[12];
	end
	if (
		( saida_epc_expected_prev[13] !== 1'bx ) && ( saida_epc_prev[13] !== saida_epc_expected_prev[13] )
		&& ((saida_epc_expected_prev[13] !== last_saida_epc_exp[13]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[13] = saida_epc_expected_prev[13];
	end
	if (
		( saida_epc_expected_prev[14] !== 1'bx ) && ( saida_epc_prev[14] !== saida_epc_expected_prev[14] )
		&& ((saida_epc_expected_prev[14] !== last_saida_epc_exp[14]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[14] = saida_epc_expected_prev[14];
	end
	if (
		( saida_epc_expected_prev[15] !== 1'bx ) && ( saida_epc_prev[15] !== saida_epc_expected_prev[15] )
		&& ((saida_epc_expected_prev[15] !== last_saida_epc_exp[15]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[15] = saida_epc_expected_prev[15];
	end
	if (
		( saida_epc_expected_prev[16] !== 1'bx ) && ( saida_epc_prev[16] !== saida_epc_expected_prev[16] )
		&& ((saida_epc_expected_prev[16] !== last_saida_epc_exp[16]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[16] = saida_epc_expected_prev[16];
	end
	if (
		( saida_epc_expected_prev[17] !== 1'bx ) && ( saida_epc_prev[17] !== saida_epc_expected_prev[17] )
		&& ((saida_epc_expected_prev[17] !== last_saida_epc_exp[17]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[17] = saida_epc_expected_prev[17];
	end
	if (
		( saida_epc_expected_prev[18] !== 1'bx ) && ( saida_epc_prev[18] !== saida_epc_expected_prev[18] )
		&& ((saida_epc_expected_prev[18] !== last_saida_epc_exp[18]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[18] = saida_epc_expected_prev[18];
	end
	if (
		( saida_epc_expected_prev[19] !== 1'bx ) && ( saida_epc_prev[19] !== saida_epc_expected_prev[19] )
		&& ((saida_epc_expected_prev[19] !== last_saida_epc_exp[19]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[19] = saida_epc_expected_prev[19];
	end
	if (
		( saida_epc_expected_prev[20] !== 1'bx ) && ( saida_epc_prev[20] !== saida_epc_expected_prev[20] )
		&& ((saida_epc_expected_prev[20] !== last_saida_epc_exp[20]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[20] = saida_epc_expected_prev[20];
	end
	if (
		( saida_epc_expected_prev[21] !== 1'bx ) && ( saida_epc_prev[21] !== saida_epc_expected_prev[21] )
		&& ((saida_epc_expected_prev[21] !== last_saida_epc_exp[21]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[21] = saida_epc_expected_prev[21];
	end
	if (
		( saida_epc_expected_prev[22] !== 1'bx ) && ( saida_epc_prev[22] !== saida_epc_expected_prev[22] )
		&& ((saida_epc_expected_prev[22] !== last_saida_epc_exp[22]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[22] = saida_epc_expected_prev[22];
	end
	if (
		( saida_epc_expected_prev[23] !== 1'bx ) && ( saida_epc_prev[23] !== saida_epc_expected_prev[23] )
		&& ((saida_epc_expected_prev[23] !== last_saida_epc_exp[23]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[23] = saida_epc_expected_prev[23];
	end
	if (
		( saida_epc_expected_prev[24] !== 1'bx ) && ( saida_epc_prev[24] !== saida_epc_expected_prev[24] )
		&& ((saida_epc_expected_prev[24] !== last_saida_epc_exp[24]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[24] = saida_epc_expected_prev[24];
	end
	if (
		( saida_epc_expected_prev[25] !== 1'bx ) && ( saida_epc_prev[25] !== saida_epc_expected_prev[25] )
		&& ((saida_epc_expected_prev[25] !== last_saida_epc_exp[25]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[25] = saida_epc_expected_prev[25];
	end
	if (
		( saida_epc_expected_prev[26] !== 1'bx ) && ( saida_epc_prev[26] !== saida_epc_expected_prev[26] )
		&& ((saida_epc_expected_prev[26] !== last_saida_epc_exp[26]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[26] = saida_epc_expected_prev[26];
	end
	if (
		( saida_epc_expected_prev[27] !== 1'bx ) && ( saida_epc_prev[27] !== saida_epc_expected_prev[27] )
		&& ((saida_epc_expected_prev[27] !== last_saida_epc_exp[27]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[27] = saida_epc_expected_prev[27];
	end
	if (
		( saida_epc_expected_prev[28] !== 1'bx ) && ( saida_epc_prev[28] !== saida_epc_expected_prev[28] )
		&& ((saida_epc_expected_prev[28] !== last_saida_epc_exp[28]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[28] = saida_epc_expected_prev[28];
	end
	if (
		( saida_epc_expected_prev[29] !== 1'bx ) && ( saida_epc_prev[29] !== saida_epc_expected_prev[29] )
		&& ((saida_epc_expected_prev[29] !== last_saida_epc_exp[29]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[29] = saida_epc_expected_prev[29];
	end
	if (
		( saida_epc_expected_prev[30] !== 1'bx ) && ( saida_epc_prev[30] !== saida_epc_expected_prev[30] )
		&& ((saida_epc_expected_prev[30] !== last_saida_epc_exp[30]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[30] = saida_epc_expected_prev[30];
	end
	if (
		( saida_epc_expected_prev[31] !== 1'bx ) && ( saida_epc_prev[31] !== saida_epc_expected_prev[31] )
		&& ((saida_epc_expected_prev[31] !== last_saida_epc_exp[31]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_epc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_epc_expected_prev);
		$display ("     Real value = %b", saida_epc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_saida_epc_exp[31] = saida_epc_expected_prev[31];
	end
	if (
		( sinal_overflow_expected_prev !== 1'bx ) && ( sinal_overflow_prev !== sinal_overflow_expected_prev )
		&& ((sinal_overflow_expected_prev !== last_sinal_overflow_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinal_overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinal_overflow_expected_prev);
		$display ("     Real value = %b", sinal_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sinal_overflow_exp = sinal_overflow_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Processador_mips_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLKM;
reg [1:0] SEL;
// wires                                               
wire [31:0] breg_r1_dado;
wire [31:0] breg_r2_dado;
wire ctr_branch;
wire ctr_branchn;
wire ctr_escreve_mem;
wire ctr_escreve_reg;
wire ctr_jal;
wire ctr_jerro;
wire ctr_jump;
wire ctr_le_mem;
wire ctr_lui;
wire ctr_mem_para_reg;
wire ctr_orig_alu;
wire ctr_reg_ds;
wire [3:0] ctrl_op_ula;
wire [31:0] din_breg;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [31:0] OUTPUT;
wire [31:0] saida_epc;
wire sinal_overflow;

wire sampler;                             

// assign statements (if any)                          
Processador_mips_final i1 (
// port map - connection between master ports and signals/registers   
	.breg_r1_dado(breg_r1_dado),
	.breg_r2_dado(breg_r2_dado),
	.CLK(CLK),
	.CLKM(CLKM),
	.ctr_branch(ctr_branch),
	.ctr_branchn(ctr_branchn),
	.ctr_escreve_mem(ctr_escreve_mem),
	.ctr_escreve_reg(ctr_escreve_reg),
	.ctr_jal(ctr_jal),
	.ctr_jerro(ctr_jerro),
	.ctr_jump(ctr_jump),
	.ctr_le_mem(ctr_le_mem),
	.ctr_lui(ctr_lui),
	.ctr_mem_para_reg(ctr_mem_para_reg),
	.ctr_orig_alu(ctr_orig_alu),
	.ctr_reg_ds(ctr_reg_ds),
	.ctrl_op_ula(ctrl_op_ula),
	.din_breg(din_breg),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.\OUTPUT (OUTPUT),
	.saida_epc(saida_epc),
	.SEL(SEL),
	.sinal_overflow(sinal_overflow)
);

// CLK
initial
begin
	CLK = 1'b1;
	# 10000;
	repeat(49)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
	CLK = 1'b0;
end 
// SEL[ 1 ]
always
begin
	SEL[1] = 1'b0;
	SEL[1] = #5000 1'b1;
	#5000;
end 
// SEL[ 0 ]
always
begin
	SEL[0] = 1'b0;
	SEL[0] = #2500 1'b1;
	#2500;
end 

// CLKM
initial
begin
	CLKM = 1'b1;
	# 100;
	repeat(4999)
	begin
		CLKM = 1'b0;
		CLKM = #100 1'b1;
		# 100;
	end
	CLKM = 1'b0;
end 

Processador_mips_final_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLKM(CLKM),
	.SEL(SEL),
	.sampler_tx(sampler)
);

Processador_mips_final_vlg_check_tst tb_out(
	.breg_r1_dado(breg_r1_dado),
	.breg_r2_dado(breg_r2_dado),
	.ctr_branch(ctr_branch),
	.ctr_branchn(ctr_branchn),
	.ctr_escreve_mem(ctr_escreve_mem),
	.ctr_escreve_reg(ctr_escreve_reg),
	.ctr_jal(ctr_jal),
	.ctr_jerro(ctr_jerro),
	.ctr_jump(ctr_jump),
	.ctr_le_mem(ctr_le_mem),
	.ctr_lui(ctr_lui),
	.ctr_mem_para_reg(ctr_mem_para_reg),
	.ctr_orig_alu(ctr_orig_alu),
	.ctr_reg_ds(ctr_reg_ds),
	.ctrl_op_ula(ctrl_op_ula),
	.din_breg(din_breg),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.OUTPUT(OUTPUT),
	.saida_epc(saida_epc),
	.sinal_overflow(sinal_overflow),
	.sampler_rx(sampler)
);
endmodule

